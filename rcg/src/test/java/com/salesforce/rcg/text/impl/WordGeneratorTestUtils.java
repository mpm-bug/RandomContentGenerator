package com.salesforce.rcg.text.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.Collections;
import java.util.List;
import java.util.Random;

import org.junit.Test;

import com.salesforce.rcg.text.WordGenerator;
import com.salesforce.rcg.util.CounterMap;

public class WordGeneratorTestUtils {
    protected static final int ITERATION_MULTIPLIER = 5000;


    /** Run a test on a weighted word generator, verifying that the actual 
     * distribution of words generated is close to what the expected distribution
     * of words is.
     * 
     * @param generator The word generator to test
     * @param expectedWeights The expected weights for the words. These are
     *     relative to each other. For example, if the values are:
     *     "a" -> 1
     *     "b" -> 2
     *     ...then we expect 33% (1/3) of the words generated by <tt>generator</tt>
     *     to be "a", and 67% (2/3) of the words to be "b". We will also verify
     *     that all the words listed in this table are included in the output.
     *     Don't go crazy here: we will generate (ITERATION_MULTIPLIER * total_weight)
     *     words, so very heavily skewed distributions may not end up generating all 
     *     the possible words from the generator, causing intermittent failures. 
     *     Bad idea. 
     */
    public static void testWeightedGenerator(WordGenerator generator,
            CounterMap<String> expectedWeights) {
        CounterMap<String> actuals = new CounterMap<>();
        
        int numIterations = (ITERATION_MULTIPLIER * expectedWeights.getTotal());
        
        // Generate a lot of words and count their frequencies
        for (int i = 0; i < numIterations; ++i) {
            String word = generator.generateWord();
            actuals.add(word);
        }        
        
        // The total list of words generated should equal the list of
        // words expected.
        List<String> expectedWords = expectedWeights.getSortedKeys(null); // Will be sorted by frequency
        Collections.sort(expectedWords); // Sort alphabetically
        List<String> actualWords = actuals.getSortedKeys(null);
        Collections.sort(actualWords);
        assertEquals(expectedWords, actualWords);
    
        // Now let's verify the weights.
        double totalExpectedWeight = (double) expectedWeights.getTotal();
        for (String expectedWord: expectedWeights.getSortedKeys(null)) {
            int actualCount = actuals.get(expectedWord);
            double actualRelativeWeight = actualCount / (double) numIterations;
            double expectedRelativeWeight = expectedWeights.get(expectedWord) / totalExpectedWeight;
            
            assertEquals("Weight for word '" + expectedWord + "'", expectedRelativeWeight, actualRelativeWeight, 0.01);            
        }
    }

    public static void testEmpty(WordGenerator testMe, String expectedName) {
        assertEquals(expectedName, testMe.getName());
        assertNull(testMe.generateWord());
    }
    
    public static void testSetRng(WordGenerator testMe) {
        assertNotNull(testMe.getRng());
        
        Random r = new Random();
        testMe.setRng(r);
        assertEquals(r, testMe.getRng());
        
    }

}
